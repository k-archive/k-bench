// Generated by CoffeeScript 1.10.0
(function() {
  var checkAdmin, checkSecret, getMethod, preValidateWrite, validateDocRead,
    slice = [].slice;

  getMethod = function(opData, op) {
    if (opData.create) {
      return 'create';
    }
    if (opData.del) {
      return 'del';
    }
    if (op != null) {
      if (op.od !== void 0 && op.oi) {
        return 'change';
      }
      if (op.oi !== void 0) {
        return 'set';
      }
      if (op.od !== void 0) {
        return 'del';
      }
      if (op.oi === null) {
        return 'del';
      }
      if (op.li !== void 0 && op.ld) {
        return 'change';
      }
      if (op.li !== void 0) {
        return 'insert';
      }
      if (op.ld !== void 0) {
        return 'remove';
      }
      if (op.si !== void 0) {
        return 'string-ins';
      }
      if (op.sd !== void 0) {
        return 'string-del';
      }
      if (op.na !== void 0) {
        return 'increment';
      }
    }
    console.log('could not find method');
    console.log('opData', opData);
    return console.log('op', op);
  };

  module.exports = function(shareClient) {
    shareClient.use('connect', function(shareRequest, next) {
      shareRequest.agent.connectSession = shareRequest.req.session;
      return next();
    });
    shareClient.filter(function(collection, docName, docData, next) {
      return validateDocRead(this, collection, docName, docData.data, next);
    });
    shareClient.use('submit', function(shareRequest, next) {
      var opData;
      opData = shareRequest.opData;
      opData.connectSession = shareRequest.agent.connectSession;
      opData.collection = shareRequest.collection;
      opData.docName = shareRequest.docName;
      return next();
    });
    shareClient.preValidate = function(opData, docData) {
      var component, d, err, i, key, len, obj, path, pathMap, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, session;
      opData.validators = [];
      session = opData.connectSession;
      d = docData.data || ((ref = opData.op) != null ? (ref1 = ref[0]) != null ? (ref2 = ref1.create) != null ? ref2.data : void 0 : void 0 : void 0);
      if (!opData.op || opData.op.length === 1) {
        return preValidateWrite(session, opData.validators, getMethod(opData, (ref3 = opData.op) != null ? ref3[0] : void 0), (ref4 = opData.op) != null ? ref4[0] : void 0, opData.collection, opData.docName, ((ref5 = opData.op) != null ? ref5[0].p : void 0) || [], docData.data || ((ref6 = opData.create) != null ? ref6.data : void 0));
      }
      pathMap = {};
      ref7 = opData.op;
      for (i = 0, len = ref7.length; i < len; i++) {
        component = ref7[i];
        path = component.p || [];
        key = path.join('.');
        pathMap[key] = {
          path: component.p,
          method: getMethod(opData, component),
          op: component
        };
      }
      for (key in pathMap) {
        obj = pathMap[key];
        err = preValidateWrite(session, opData.validators, obj[method], op, opData.collection, opData.docName, obj[path], docData.data || (typeof op !== "undefined" && op !== null ? (ref8 = op.create) != null ? ref8.data : void 0 : void 0));
        if (err) {
          return err;
        }
      }
    };
    return shareClient.validate = function(opData, docData) {
      var doc, err, fn, i, len, ref;
      if (!opData.validators.length) {
        return;
      }
      doc = docData.data;
      ref = opData.validators;
      for (i = 0, len = ref.length; i < len; i++) {
        fn = ref[i];
        err = fn(doc, opData);
        if (err) {
          return err;
        }
      }
    };
  };

  validateDocRead = function(agent, collection, docId, doc, next) {
    var session, userId;
    session = agent.connectSession;
    userId = session != null ? session.userId : void 0;
    if (!session) {
      console.error('Warning: Doc read access no session ', collection, docId);
      return next('403: No session');
    }
    if (!userId) {
      console.error('Warning: Doc read access no session.userId ', collection, docId, session);
      return next('403: No session.userId');
    }
    if (collection === 'auths') {
      if (docId !== userId) {
        return next("403: Cannot read " + collection + " who is not you.. (" + docId + ", " + userId + ")");
      }
    }
    return next();
  };

  preValidateWrite = function(session, validators, method, opData, collection, docId, path, doc) {
    var admin, fullPath, loggedIn, userId;
    userId = session != null ? session.userId : void 0;
    admin = session != null ? session.admin : void 0;
    loggedIn = session != null ? session.loggedIn : void 0;
    fullPath = path.join('.');
    if (!session) {
      console.error.apply(console, ['Warning: Write access no session'].concat(slice.call(arguments)));
      return '403: No session';
    }
    if (!userId) {
      console.error.apply(console, ['Warning: Write access no session.userId'].concat(slice.call(arguments)));
      return '403: No session.userId';
    }
    if (!docId) {
      console.error.apply(console, ['Warning: Write access no docId'].concat(slice.call(arguments)));
      return '403: No docId';
    }
    if (!doc) {
      console.error.apply(console, ['Error: No document snapshot or create data'].concat(slice.call(arguments)));
      return '403: No document snapshot or create data';
    }
    if (collection === 'auth_try') {
      return;
    }
    if (collection === 'auths') {
      if (docId !== userId) {
        return "403: Cannot modify " + collection + " who is not you";
      }
      return;
    }
    if (collection === 'auths') {
      validators.push(function(mutatedDoc) {
        if (!mutatedDoc || mutatedDoc.admin === doc.admin) {
          return;
        }
        return '403: Cannot modify a document to have a different admin status';
      });
    }
    if (collection === 'auths_public') {
      if (fullPath === 'local.reset.token' || fullPath === 'local.reset.when' || fullPath === 'local.reg' || fullPath === 'local.reg.when' || fullPath === 'local.reg.token') {
        return;
      }
      if (method === 'create') {
        return;
      }
      return "403: Cannot modify auths_public";
    }
    console.log('access denied...', userId, method, collection, fullPath);
    return "403: cannot modify " + collection;
  };

  checkSecret = function(collection, docId, userId, cb) {
    if (!docId) {
      return cb('403: Cannot access document missing id reference');
    }
    return agent.fetch(collection, docId, function(err, doc) {
      var ref;
      if (err) {
        return cb(err);
      }
      if (((ref = doc.data) != null ? ref.secretTo : void 0) !== userId) {
        return cb();
      }
      return cb('403: Cannot access secret document');
    });
  };

  checkAdmin = function(collection, docId, userId, cb) {
    if (!docId) {
      return cb('403: Cannot access document missing id reference');
    }
    return agent.fetch(collection, docId, function(err, doc) {
      var ref;
      if (err) {
        return cb(err);
      }
      if (((ref = doc.data) != null ? ref.secretTo : void 0) !== userId) {
        return cb();
      }
      return cb('403: Cannot access secret document');
    });
  };

}).call(this);
