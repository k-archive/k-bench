// Generated by CoffeeScript 1.10.0
(function() {
  var RedisStore, app, bodyParser, coffeeify, compression, cookieParser, createStore, errorMiddleware, express, expressApp, expressSession, kclient, kmodel, publicDir, racerhighway, racerhighwayHandlers, routes, session, store;

  express = require('express');

  kclient = require('k-client');

  kclient.use(require('k-bundle'));

  kmodel = require('k-model');

  racerhighway = require('k-highway');

  coffeeify = require('coffeeify');

  app = require('../app/index');

  routes = require('./routes');

  errorMiddleware = require('./error');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  compression = require('compression');

  expressSession = require('express-session');

  RedisStore = require('connect-redis')(expressSession);

  expressApp = module.exports = express();

  kmodel.Model.INITS.push(function(model) {
    return model.root.on('error', function(err) {
      return console.log(err);
    });
  });

  publicDir = __dirname + '/../../public';

  store = null;


  /*
  store.shareClient.backend.addProjection "auths_public", "auths", 'json0',
    {
      id: true,
      timestamps: true,
      status: true,
      local: true
    }
   */

  createStore = function(which, sharding) {
    var arangoUrl, mongoUrl;
    console.log("create store in " + which);
    if (which === 'arango') {
      arangoUrl = sharding ? 'http://localhost:8530/kantele-cluster' : 'http://localhost:8529/kantele-app';
      return store = kclient.createBackend({
        db: require('k-livedb-arango')(arangoUrl)
      });
    } else if (which === 'mongo') {
      mongoUrl = process.env.MONGO_URL || process.env.MONGOHQ_URL || 'mongodb://localhost:27017/kantele-app';
      return store = kclient.createBackend({
        db: require('k-livedb-mongo')(mongoUrl, {
          safe: true
        })
      });
    }
  };

  createStore(process.argv[2] || 'arango');

  session = expressSession({
    secret: process.env.SESSION_SECRET || 'session-secret-that-you-should-change',
    store: new RedisStore({
      host: process.env.REDIS_HOST || 'localhost',
      port: process.env.REDIS_PORT || 6379
    }),
    resave: false,
    saveUninitialized: false
  });

  racerhighwayHandlers = racerhighway(store, {
    session: session
  });

  module.exports.upgrade = racerhighwayHandlers.upgrade;

  store.on('bundle', function(browserify) {
    return browserify.transform(coffeeify);
  });

  expressApp.use(compression({
    threshold: 512
  })).use(express["static"](publicDir)).use(cookieParser()).use(session).use(racerhighwayHandlers.middleware).use(store.modelMiddleware()).use(bodyParser.urlencoded({
    extended: true
  })).use(app.router());

  routes(expressApp);

  expressApp.use(errorMiddleware);

  app.writeScripts(store, publicDir, {
    extensions: [".coffee"],
    disableScriptMap: false
  }, function(err) {
    console.log(err);
  });

}).call(this);
