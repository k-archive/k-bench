// Generated by CoffeeScript 1.10.0
(function() {
  var app, count, increment, max, min, start, t, timer, total;

  app = require('./index');

  t = 0;

  timer = 0;

  total = 0;

  count = 0;

  start = false;

  min = 999;

  max = 0;

  increment = function() {
    var t2;
    t2 = Date.now() - t;
    count++;
    total += t2;
    this.model.set('_a.count', count);
    this.model.set('_a.avg', total / count);
    min = Math.min(min, t2);
    max = Math.max(max, t2);
    this.model.set('_a.min', min);
    return this.model.set('_a.max', max);
  };

  app.proto.stop = function() {
    clearTimeout(timer);
    this.model.del('_a.start');
    return start = false;
  };

  app.proto.start = function() {
    this.model.set('_a.avg', 0);
    total = 0;
    count = 0;
    min = 999;
    max = 0;
    start = true;
    this.model.set('_a.start', true);
    return setTimeout(((function(_this) {
      return function() {
        return _this.app.history.push('/');
      };
    })(this)), 100);
  };

  app.proto.clear = function() {
    var i, item, items, len, results;
    items = this.model.root.get('_page.items');
    if (items) {
      results = [];
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        results.push(this.model.root.del("items." + item.id));
      }
      return results;
    }
  };

  app.proto.populate = function() {
    var i, num, results;
    results = [];
    for (num = i = 1; i <= 100; num = ++i) {
      results.push(this.model.root.add('items', {
        name: Math.random().toString(36).substring(15),
        data: Math.random().toString(36).substring(15)
      }));
    }
    return results;
  };

  app.get('/', function(page, model, params, next) {
    var items;
    t = Date.now();
    items = model.query('items', {});
    return model.subscribe(items, (function(_this) {
      return function(err) {
        model.ref('_page.items', items);
        if (start) {
          increment.call(_this);
          timer = setTimeout((function() {
            return _this.app.history.push('/');
          }), 200);
        }
        return page.render('home');
      };
    })(this));
  });

}).call(this);
