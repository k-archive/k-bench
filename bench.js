// Generated by CoffeeScript 1.10.0
(function() {
  var avg, clear, count, createStore, db, go, increment, kmodel, max, min, model, populate, publicDir, start, stop, store, t, t2, timer, total;

  kmodel = require('k-model');

  kmodel.Model.INITS.push(function(model) {
    return model.root.on('error', function(err) {
      return console.log(err);
    });
  });

  publicDir = __dirname + '/../../public';

  store = null;

  createStore = function(which) {
    var npm, url;
    console.log("create store in " + which);
    switch (which) {
      case 'arango':
        url = 'http://localhost:8529/kantele-app';
        npm = 'k-livedb-arango';
        break;
      case 'arango-sharding':
        url = 'http://localhost:8530/kantele-cluster';
        npm = 'k-livedb-arango';
        break;
      case 'mongo':
        url = 'mongodb://localhost:27017/kantele-app';
        npm = 'k-livedb-mongo';
        break;
    }
    return store = kmodel.createBackend({
      db: require(npm)(url, {
        safe: true
      })
    });
  };

  db = process.argv[2] || 'arango';

  if (db !== 'mongo' && db !== 'arango' && db !== 'arango-sharding') {
    console.log('db should be:', ['mongo', 'arango', 'arango-sharding']);
    process.exit();
  }

  createStore(db);

  model = store.createModel();

  t = t2 = 0;

  timer = 0;

  total = 0;

  count = 0;

  start = false;

  min = 999;

  max = 0;

  avg = 0;

  increment = function() {
    t2 = Date.now() - t;
    count++;
    total += t2;
    avg = total / count;
    min = Math.min(min, t2);
    return max = Math.max(max, t2);
  };

  stop = function() {
    clearTimeout(timer);
    return start = false;
  };

  start = function() {
    total = 0;
    count = 0;
    min = 999;
    max = 0;
    start = true;
    return setTimeout(((function(_this) {
      return function() {
        return _this.app.history.push('/');
      };
    })(this)), 100);
  };

  clear = function() {
    var items;
    items = model.query('items', {});
    return model.subscribe(items, function(err) {
      var i, item, len;
      items = items.get();
      console.log('clear', db, items != null ? items.length : void 0);
      if (items) {
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];
          model.root.del("items." + item.id);
        }
      }
      return model.whenNothingPending((function() {
        return process.exit();
      }));
    });
  };

  populate = function() {
    var i, num;
    console.log('populate 100 in', db);
    for (num = i = 1; i <= 100; num = ++i) {
      model.root.add('items', {
        name: Math.random().toString(36).substring(15),
        data: Math.random().toString(36).substring(15)
      });
    }
    return model.whenNothingPending((function() {
      return process.exit();
    }));
  };

  go = function() {
    var items;
    t = Date.now();
    items = model.query('items', {});
    return model.subscribe(items, function(err) {
      var ref;
      if (err) {
        console.log(err);
      }
      if (err) {
        return process.exit();
      } else {
        increment();
        console.log("got " + (items != null ? (ref = items.get()) != null ? ref.length : void 0 : void 0) + "\t Average: " + (Math.round(avg)) + "\t Now: " + t2 + "\t Min: " + min + "\t Max: " + max);
        return items.unsubscribe(function() {
          return timer = setTimeout(go, 100);
        });
      }
    });
  };

  switch (process.argv[3]) {
    case 'populate':
      populate();
      break;
    case 'clear':
      clear();
      break;
    default:
      go();
  }

}).call(this);
